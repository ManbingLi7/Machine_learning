{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":70942,"databundleVersionId":10381525,"sourceType":"competition"}],"dockerImageVersionId":30886,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n!pip install shap==0.46.0\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-23T13:22:55.413186Z","iopub.execute_input":"2025-07-23T13:22:55.413445Z","iopub.status.idle":"2025-07-23T13:23:03.536136Z","shell.execute_reply.started":"2025-07-23T13:22:55.413417Z","shell.execute_reply":"2025-07-23T13:23:03.535041Z"}},"outputs":[{"name":"stdout","text":"Collecting shap==0.46.0\n  Downloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (24 kB)\nRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (1.13.1)\nRequirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (1.2.2)\nRequirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (2.2.3)\nRequirement already satisfied: tqdm>=4.27.0 in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (4.67.1)\nRequirement already satisfied: packaging>20.9 in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (24.2)\nCollecting slicer==0.0.8 (from shap==0.46.0)\n  Downloading slicer-0.0.8-py3-none-any.whl.metadata (4.0 kB)\nRequirement already satisfied: numba in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (0.60.0)\nRequirement already satisfied: cloudpickle in /usr/local/lib/python3.10/dist-packages (from shap==0.46.0) (3.1.0)\nRequirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba->shap==0.46.0) (0.43.0)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->shap==0.46.0) (2.4.1)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->shap==0.46.0) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->shap==0.46.0) (2025.1)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas->shap==0.46.0) (2025.1)\nRequirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap==0.46.0) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->shap==0.46.0) (3.5.0)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->shap==0.46.0) (1.17.0)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->shap==0.46.0) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->shap==0.46.0) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->shap==0.46.0) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->shap==0.46.0) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->shap==0.46.0) (2024.2.0)\nDownloading shap-0.46.0-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (540 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m540.1/540.1 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading slicer-0.0.8-py3-none-any.whl (15 kB)\nInstalling collected packages: slicer, shap\n  Attempting uninstall: slicer\n    Found existing installation: slicer 0.0.7\n    Uninstalling slicer-0.0.7:\n      Successfully uninstalled slicer-0.0.7\n  Attempting uninstall: shap\n    Found existing installation: shap 0.44.1\n    Uninstalling shap-0.44.1:\n      Successfully uninstalled shap-0.44.1\nSuccessfully installed shap-0.46.0 slicer-0.0.8\n/kaggle/input/equity-post-HCT-survival-predictions/sample_submission.csv\n/kaggle/input/equity-post-HCT-survival-predictions/data_dictionary.csv\n/kaggle/input/equity-post-HCT-survival-predictions/train.csv\n/kaggle/input/equity-post-HCT-survival-predictions/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/equity-post-HCT-survival-predictions/train.csv')\ntest = pd.read_csv('/kaggle/input/equity-post-HCT-survival-predictions/test.csv')\nprint(data.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:07:59.683384Z","iopub.execute_input":"2025-02-28T21:07:59.683711Z","iopub.status.idle":"2025-02-28T21:07:59.858217Z","shell.execute_reply.started":"2025-02-28T21:07:59.683692Z","shell.execute_reply":"2025-02-28T21:07:59.857477Z"}},"outputs":[{"name":"stdout","text":"   ID                       dri_score psych_disturb    cyto_score diabetes  \\\n0   0  N/A - non-malignant indication            No           NaN       No   \n1   1                    Intermediate            No  Intermediate       No   \n2   2  N/A - non-malignant indication            No           NaN       No   \n3   3                            High            No  Intermediate       No   \n4   4                            High            No           NaN       No   \n\n   hla_match_c_high  hla_high_res_8          tbi_status arrhythmia  \\\n0               NaN             NaN              No TBI         No   \n1               2.0             8.0  TBI +- Other, >cGy         No   \n2               2.0             8.0              No TBI         No   \n3               2.0             8.0              No TBI         No   \n4               2.0             8.0              No TBI         No   \n\n   hla_low_res_6  ...          tce_div_match donor_related  \\\n0            6.0  ...                    NaN     Unrelated   \n1            6.0  ...  Permissive mismatched       Related   \n2            6.0  ...  Permissive mismatched       Related   \n3            6.0  ...  Permissive mismatched     Unrelated   \n4            6.0  ...  Permissive mismatched       Related   \n\n       melphalan_dose hla_low_res_8 cardiac  hla_match_drb1_high  \\\n0  N/A, Mel not given           8.0      No                  2.0   \n1  N/A, Mel not given           8.0      No                  2.0   \n2  N/A, Mel not given           8.0      No                  2.0   \n3  N/A, Mel not given           8.0      No                  2.0   \n4                 MEL           8.0      No                  2.0   \n\n  pulm_moderate  hla_low_res_10  efs efs_time  \n0            No            10.0  0.0   42.356  \n1           Yes            10.0  1.0    4.672  \n2            No            10.0  0.0   19.793  \n3            No            10.0  0.0  102.349  \n4            No            10.0  0.0   16.223  \n\n[5 rows x 60 columns]\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n  has_large_values = (abs_vals > 1e6).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n/usr/local/lib/python3.10/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"#separate features and target variables\nX_data = data.drop(columns=['efs','efs_time'])\ny_efs = data['efs']\ny_efs_time = data['efs_time']\n\n#Identify categorical and numerical columns\ncategorical_cols = X_data.select_dtypes(include=['object', 'category']).columns\nnumerical_cols = X_data.select_dtypes(include=['int64', 'float64']).columns\n\n#Handle missing values\n#For numberical columns: impute with mean or median\n#For categorical columns: impute with the most frequent value\nnumerical_imputer = SimpleImputer(strategy='mean')\ncategorical_imputer = SimpleImputer(strategy='most_frequent')\n\n#Encode categorical variables using OneHotEncoder\ncategorical_encoder = OneHotEncoder(handle_unknown='ignore')\n\n#Scale numerical features\nnumerical_scaler = StandardScaler()\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', Pipeline(steps=[('impute', numerical_imputer), ('scaler', numerical_scaler)]), numerical_cols),\n        ('cat', Pipeline(steps=[('impute', categorical_imputer), ('encoder', categorical_encoder)]), categorical_cols)\n    ])\n\nX_processed = preprocessor.fit_transform(X_data)\nprocessed_feature_names = (list(numerical_cols)+list(preprocessor.named_transformers_['cat']['encoder'].get_feature_names_out(categorical_cols)))\nX_processed_df = pd.DataFrame(X_processed, columns=processed_feature_names)\n#print(X_processed_df.head())\n# Save the processed data to a new file (optional)\nX_processed_df.to_csv('/kaggle/working/processed_data.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:07:59.859554Z","iopub.execute_input":"2025-02-28T21:07:59.859744Z","iopub.status.idle":"2025-02-28T21:08:02.164379Z","shell.execute_reply.started":"2025-02-28T21:07:59.859726Z","shell.execute_reply":"2025-02-28T21:08:02.163471Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = X_processed_df # Processed features\ny = y_efs #Target variable\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint(\"Training set shape:\", X_train.shape)\nprint(\"Testing set shape\", X_test.shape)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:08:02.165625Z","iopub.execute_input":"2025-02-28T21:08:02.165833Z","iopub.status.idle":"2025-02-28T21:08:02.184171Z","shell.execute_reply.started":"2025-02-28T21:08:02.165816Z","shell.execute_reply":"2025-02-28T21:08:02.183286Z"}},"outputs":[{"name":"stdout","text":"Training set shape: (23040, 184)\nTesting set shape (5760, 184)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"#data split into train, test and validation sets\n# Split the data\nX_train, X_test, y_train, y_test = train_test_split(X_processed_df, data['efs'], test_size=0.2, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\nprint(\"Training set shape:\", X_train.shape)\nprint(\"Testing set shape\", X_test.shape)\n# Convert to NumPy arrays\nX_train_np = X_train.values\nX_test_np = X_test.values\nX_val_np = X_val.values\nprint(X_train.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:08:02.184965Z","iopub.execute_input":"2025-02-28T21:08:02.185212Z","iopub.status.idle":"2025-02-28T21:08:02.213794Z","shell.execute_reply.started":"2025-02-28T21:08:02.185187Z","shell.execute_reply":"2025-02-28T21:08:02.212913Z"}},"outputs":[{"name":"stdout","text":"Training set shape: (18432, 184)\nTesting set shape (5760, 184)\n(18432, 184)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.optimizers import Adam\n\nmodel = Sequential([\n    Dense(128, activation='relu', input_shape=(X_train.shape[1], )),\n    Dropout(0.3), #regularization to prevent overfitting\n    Dense(64, activation='relu'),\n    Dropout(0.3),\n    Dense(32, activation='relu'),\n    Dense(1, activation='sigmoid')\n])\n\nmodel.compile(optimizer=Adam(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:08:02.214636Z","iopub.execute_input":"2025-02-28T21:08:02.214953Z","iopub.status.idle":"2025-02-28T21:08:04.587281Z","shell.execute_reply.started":"2025-02-28T21:08:02.214887Z","shell.execute_reply":"2025-02-28T21:08:04.586191Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │          \u001b[38;5;34m23,680\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │           \u001b[38;5;34m8,256\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m)                  │               \u001b[38;5;34m0\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m)                  │           \u001b[38;5;34m2,080\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m33\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">23,680</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,256</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)                  │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">2,080</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">33</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m34,049\u001b[0m (133.00 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">34,049</span> (133.00 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m34,049\u001b[0m (133.00 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">34,049</span> (133.00 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"history = model.fit(\n    X_train_np, y_train,\n    validation_data=(X_val_np, y_val),\n    epochs=50, \n    batch_size=32,\n    verbose=1\n)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:08:04.588393Z","iopub.execute_input":"2025-02-28T21:08:04.588970Z","iopub.status.idle":"2025-02-28T21:08:59.201559Z","shell.execute_reply.started":"2025-02-28T21:08:04.588944Z","shell.execute_reply":"2025-02-28T21:08:59.200708Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.6047 - loss: 0.6586 - val_accuracy: 0.6682 - val_loss: 0.6081\nEpoch 2/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6708 - loss: 0.6067 - val_accuracy: 0.6743 - val_loss: 0.6013\nEpoch 3/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6811 - loss: 0.5958 - val_accuracy: 0.6756 - val_loss: 0.6007\nEpoch 4/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6846 - loss: 0.5906 - val_accuracy: 0.6753 - val_loss: 0.5993\nEpoch 5/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6842 - loss: 0.5895 - val_accuracy: 0.6717 - val_loss: 0.6062\nEpoch 6/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6999 - loss: 0.5765 - val_accuracy: 0.6777 - val_loss: 0.5998\nEpoch 7/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6954 - loss: 0.5800 - val_accuracy: 0.6762 - val_loss: 0.6030\nEpoch 8/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6990 - loss: 0.5777 - val_accuracy: 0.6764 - val_loss: 0.6018\nEpoch 9/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.6976 - loss: 0.5740 - val_accuracy: 0.6753 - val_loss: 0.6036\nEpoch 10/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7110 - loss: 0.5634 - val_accuracy: 0.6699 - val_loss: 0.6070\nEpoch 11/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7132 - loss: 0.5626 - val_accuracy: 0.6714 - val_loss: 0.6076\nEpoch 12/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7190 - loss: 0.5509 - val_accuracy: 0.6714 - val_loss: 0.6089\nEpoch 13/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7197 - loss: 0.5491 - val_accuracy: 0.6684 - val_loss: 0.6137\nEpoch 14/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7186 - loss: 0.5440 - val_accuracy: 0.6573 - val_loss: 0.6410\nEpoch 15/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7267 - loss: 0.5319 - val_accuracy: 0.6602 - val_loss: 0.6194\nEpoch 16/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7353 - loss: 0.5234 - val_accuracy: 0.6532 - val_loss: 0.6346\nEpoch 17/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7369 - loss: 0.5234 - val_accuracy: 0.6606 - val_loss: 0.6374\nEpoch 18/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7413 - loss: 0.5151 - val_accuracy: 0.6593 - val_loss: 0.6428\nEpoch 19/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7438 - loss: 0.5154 - val_accuracy: 0.6547 - val_loss: 0.6464\nEpoch 20/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7540 - loss: 0.5007 - val_accuracy: 0.6530 - val_loss: 0.6622\nEpoch 21/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7555 - loss: 0.4927 - val_accuracy: 0.6500 - val_loss: 0.6672\nEpoch 22/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7668 - loss: 0.4786 - val_accuracy: 0.6506 - val_loss: 0.6713\nEpoch 23/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7670 - loss: 0.4799 - val_accuracy: 0.6478 - val_loss: 0.6696\nEpoch 24/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7674 - loss: 0.4785 - val_accuracy: 0.6478 - val_loss: 0.6868\nEpoch 25/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7730 - loss: 0.4657 - val_accuracy: 0.6452 - val_loss: 0.6839\nEpoch 26/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7783 - loss: 0.4598 - val_accuracy: 0.6398 - val_loss: 0.6776\nEpoch 27/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7756 - loss: 0.4618 - val_accuracy: 0.6471 - val_loss: 0.7058\nEpoch 28/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7804 - loss: 0.4534 - val_accuracy: 0.6528 - val_loss: 0.7268\nEpoch 29/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7888 - loss: 0.4490 - val_accuracy: 0.6474 - val_loss: 0.7140\nEpoch 30/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7831 - loss: 0.4463 - val_accuracy: 0.6382 - val_loss: 0.7283\nEpoch 31/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7894 - loss: 0.4342 - val_accuracy: 0.6350 - val_loss: 0.7079\nEpoch 32/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7965 - loss: 0.4325 - val_accuracy: 0.6452 - val_loss: 0.7242\nEpoch 33/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7918 - loss: 0.4343 - val_accuracy: 0.6439 - val_loss: 0.7522\nEpoch 34/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7970 - loss: 0.4282 - val_accuracy: 0.6302 - val_loss: 0.7452\nEpoch 35/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7928 - loss: 0.4295 - val_accuracy: 0.6487 - val_loss: 0.7716\nEpoch 36/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.7947 - loss: 0.4217 - val_accuracy: 0.6408 - val_loss: 0.7666\nEpoch 37/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8084 - loss: 0.4107 - val_accuracy: 0.6426 - val_loss: 0.7775\nEpoch 38/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8032 - loss: 0.4185 - val_accuracy: 0.6380 - val_loss: 0.7679\nEpoch 39/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8131 - loss: 0.4080 - val_accuracy: 0.6315 - val_loss: 0.8155\nEpoch 40/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8083 - loss: 0.4057 - val_accuracy: 0.6393 - val_loss: 0.8089\nEpoch 41/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8043 - loss: 0.4117 - val_accuracy: 0.6369 - val_loss: 0.8248\nEpoch 42/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8162 - loss: 0.3989 - val_accuracy: 0.6259 - val_loss: 0.7911\nEpoch 43/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8088 - loss: 0.4072 - val_accuracy: 0.6241 - val_loss: 0.8319\nEpoch 44/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8162 - loss: 0.3933 - val_accuracy: 0.6367 - val_loss: 0.8349\nEpoch 45/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8172 - loss: 0.3922 - val_accuracy: 0.6332 - val_loss: 0.8145\nEpoch 46/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8164 - loss: 0.3912 - val_accuracy: 0.6367 - val_loss: 0.8337\nEpoch 47/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8193 - loss: 0.3913 - val_accuracy: 0.6382 - val_loss: 0.8350\nEpoch 48/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8224 - loss: 0.3817 - val_accuracy: 0.6352 - val_loss: 0.8788\nEpoch 49/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8209 - loss: 0.3813 - val_accuracy: 0.6374 - val_loss: 0.8522\nEpoch 50/50\n\u001b[1m576/576\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8236 - loss: 0.3862 - val_accuracy: 0.6311 - val_loss: 0.8477\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"\npred = model.predict(X_test_np[:10])\nprint(pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:08:59.203786Z","iopub.execute_input":"2025-02-28T21:08:59.204134Z","iopub.status.idle":"2025-02-28T21:08:59.295171Z","shell.execute_reply.started":"2025-02-28T21:08:59.204108Z","shell.execute_reply":"2025-02-28T21:08:59.294173Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step\n[[0.92962277]\n [0.96232045]\n [0.84805423]\n [0.29679862]\n [0.41963932]\n [0.77347594]\n [0.855246  ]\n [0.9203231 ]\n [0.91989034]\n [0.80261284]]\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"import shap\nprint(shap.__version__)\nprint(tf.__version__)\n# Initialize the SHAP explainer\nexplainer = shap.DeepExplainer(model, X_train_np)\n\n# Calculate SHAP values\nshap_values = explainer.shap_values(X_test_np)\n\n# Visualize the SHAP values\nshap.summary_plot(shap_values, X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T21:09:14.706136Z","iopub.execute_input":"2025-02-28T21:09:14.706508Z","execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[{"name":"stdout","text":"0.46.0\n2.17.1\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/shap/explainers/_deep/deep_tf.py:99: UserWarning: Your TensorFlow version is newer than 2.4.0 and so graph support has been removed in eager mode and some static graphs may not be supported. See PR #1483 for discussion.\n  warnings.warn(\"Your TensorFlow version is newer than 2.4.0 and so graph support has been removed in eager mode and some static graphs may not be supported. See PR #1483 for discussion.\")\n/usr/local/lib/python3.10/dist-packages/shap/explainers/_deep/deep_tf.py:155: UserWarning: You have provided over 5k background samples! For better performance consider using smaller random sample.\n  warnings.warn(\"You have provided over 5k background samples! For better performance consider using smaller random sample.\")\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"print(tf.__version__)\nprint(shap.__version__)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.458Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install lifelines\n!pip install --upgrade shap","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nfrom lifelines.utils import concordance_index\n#Evalute on the test set\ntest_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Test Accuracy:\", test_accuracy)\n#Calculate C-index\ny_pred = model.predict(X_test)\nc_index = concordance_index(y_test, y_pred)\nprint(\"C-index:\", c_index)\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install fairlearn\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(model.output)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import shap\nprint(model.output)\n# Initialize the SHAP explainer\nexplainer = shap.DeepExplainer(model, X_train.values)\n\n# Calculate SHAP values\nshap_values = explainer.shap_values(X_test.values)\n\n# Visualize the SHAP values\nshap.summary_plot(shap_values, X_test)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from fairlearn.postprocessing import ThresholdOptimizer\n\nfair_model = ThresholdOptimizer(estimator=model, constraints='demographic_parity')\nfair_model.fit(X_train, y_train, sensitive_feature=X_train['race_column'])\n\ny_pred_fair = fair_model.predict(X_test, sensitive_features=X_test['race_column'])\nfairness_metric = demographic_parity_difference(y_test, y_pred_fair, sensitive_features=X_test['race_column'])\nprint(\"Fairness Metric (Demographic Parity Difference):\", fairness_metric)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-03-02T13:42:31.459Z"}},"outputs":[],"execution_count":null}]}